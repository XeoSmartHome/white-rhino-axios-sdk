/* tslint:disable */
/* eslint-disable */
/**
 * Title
 * Title
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ActionParameter
 */
export interface ActionParameter {
    /**
     * 
     * @type {string}
     * @memberof ActionParameter
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ActionParameter
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ActionParameter
     */
    'uri': string;
    /**
     * 
     * @type {string}
     * @memberof ActionParameter
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ActionParameter
     */
    'type': ActionParameterTypeEnum;
    /**
     * 
     * @type {ActionParameterDataType}
     * @memberof ActionParameter
     */
    'dataType'?: ActionParameterDataType;
    /**
     * 
     * @type {string}
     * @memberof ActionParameter
     */
    'inputType': ActionParameterInputTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ActionParameter
     */
    'unit'?: ActionParameterUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof ActionParameter
     */
    'maxValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActionParameter
     */
    'minValue'?: number;
    /**
     * 
     * @type {ActionParameterDefaultValue}
     * @memberof ActionParameter
     */
    'defaultValue'?: ActionParameterDefaultValue;
    /**
     * 
     * @type {Array<ActionParameterOptionsInner>}
     * @memberof ActionParameter
     */
    'options'?: Array<ActionParameterOptionsInner>;
}

export const ActionParameterTypeEnum = {
    Number: 'NUMBER',
    TimeInterval: 'TIME_INTERVAL'
} as const;

export type ActionParameterTypeEnum = typeof ActionParameterTypeEnum[keyof typeof ActionParameterTypeEnum];
export const ActionParameterInputTypeEnum = {
    Slider: 'SLIDER',
    Dropdown: 'DROPDOWN',
    ColorPicker: 'COLOR_PICKER'
} as const;

export type ActionParameterInputTypeEnum = typeof ActionParameterInputTypeEnum[keyof typeof ActionParameterInputTypeEnum];
export const ActionParameterUnitEnum = {
    Celsius: 'CELSIUS',
    Minute: 'MINUTE',
    Seconds: 'SECONDS',
    Hour: 'HOUR',
    Color: 'COLOR',
    None: 'NONE'
} as const;

export type ActionParameterUnitEnum = typeof ActionParameterUnitEnum[keyof typeof ActionParameterUnitEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const ActionParameterDataType = {
    Uint8: 'uint8',
    Int8: 'int8',
    Uint16: 'uint16',
    Int16: 'int16',
    Uint32: 'uint32',
    Int32: 'int32',
    Uint64: 'uint64',
    Int64: 'int64',
    Float16: 'float16',
    Float32: 'float32',
    Float64: 'float64',
    String: 'string'
} as const;

export type ActionParameterDataType = typeof ActionParameterDataType[keyof typeof ActionParameterDataType];


/**
 * @type ActionParameterDefaultValue
 * @export
 */
export type ActionParameterDefaultValue = number | string;

/**
 * 
 * @export
 * @interface ActionParameterOptionsInner
 */
export interface ActionParameterOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof ActionParameterOptionsInner
     */
    'label': string;
    /**
     * 
     * @type {object}
     * @memberof ActionParameterOptionsInner
     */
    'value': object;
}
/**
 * 
 * @export
 * @interface AddDeviceToRoomRequest
 */
export interface AddDeviceToRoomRequest {
    /**
     * 
     * @type {string}
     * @memberof AddDeviceToRoomRequest
     */
    'deviceId': string;
}
/**
 * 
 * @export
 * @interface ApplyScene200Response
 */
export interface ApplyScene200Response {
    /**
     * 
     * @type {string}
     * @memberof ApplyScene200Response
     */
    'requestId': string;
}
/**
 * 
 * @export
 * @interface BaseAction
 */
export interface BaseAction {
    /**
     * 
     * @type {string}
     * @memberof BaseAction
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BaseAction
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BaseAction
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof BaseAction
     */
    'uri': string;
    /**
     * 
     * @type {Array<ActionParameter>}
     * @memberof BaseAction
     */
    'parameters': Array<ActionParameter>;
}
/**
 * Push button action
 * @export
 * @interface ButtonAction
 */
export interface ButtonAction {
    /**
     * 
     * @type {string}
     * @memberof ButtonAction
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ButtonAction
     */
    'type': ButtonActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ButtonAction
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ButtonAction
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ButtonAction
     */
    'uri': string;
    /**
     * 
     * @type {ExecutionTriggers}
     * @memberof ButtonAction
     */
    'executionTriggers': ExecutionTriggers;
    /**
     * 
     * @type {Array<ActionParameter>}
     * @memberof ButtonAction
     */
    'parameters': Array<ActionParameter>;
}

export const ButtonActionTypeEnum = {
    Button: 'BUTTON'
} as const;

export type ButtonActionTypeEnum = typeof ButtonActionTypeEnum[keyof typeof ButtonActionTypeEnum];

/**
 * 
 * @export
 * @interface CheckResetPasswordVerificationCodeRequest
 */
export interface CheckResetPasswordVerificationCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof CheckResetPasswordVerificationCodeRequest
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof CheckResetPasswordVerificationCodeRequest
     */
    'verificationCode': string;
}
/**
 * a color picker button that display the current color
 * @export
 * @interface ColorPickerAction
 */
export interface ColorPickerAction {
    /**
     * 
     * @type {string}
     * @memberof ColorPickerAction
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ColorPickerAction
     */
    'type': ColorPickerActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ColorPickerAction
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ColorPickerAction
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ColorPickerAction
     */
    'uri': string;
    /**
     * 
     * @type {ExecutionTriggers}
     * @memberof ColorPickerAction
     */
    'executionTriggers': ExecutionTriggers;
}

export const ColorPickerActionTypeEnum = {
    ColorPicker: 'COLOR_PICKER'
} as const;

export type ColorPickerActionTypeEnum = typeof ColorPickerActionTypeEnum[keyof typeof ColorPickerActionTypeEnum];

/**
 * 
 * @export
 * @interface ConfirmResetPasswordRequest
 */
export interface ConfirmResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfirmResetPasswordRequest
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmResetPasswordRequest
     */
    'verificationCode': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmResetPasswordRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ConnectWithGoogleRequest
 */
export interface ConnectWithGoogleRequest {
    /**
     * Google token
     * @type {string}
     * @memberof ConnectWithGoogleRequest
     */
    'idToken': string;
}
/**
 * 
 * @export
 * @interface CreateAccountRequest
 */
export interface CreateAccountRequest {
    /**
     * First name of the user
     * @type {string}
     * @memberof CreateAccountRequest
     */
    'firstName': string;
    /**
     * Last name of the user
     * @type {string}
     * @memberof CreateAccountRequest
     */
    'lastName': string;
    /**
     * Email address of the user
     * @type {string}
     * @memberof CreateAccountRequest
     */
    'email': string;
    /**
     * Password of the user
     * @type {string}
     * @memberof CreateAccountRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateDeviceTaskRequest
 */
export interface CreateDeviceTaskRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceTaskRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceTaskRequest
     */
    'actionId': string;
    /**
     * 
     * @type {object}
     * @memberof CreateDeviceTaskRequest
     */
    'parameters': object;
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceTaskRequest
     */
    'cron': string;
}
/**
 * 
 * @export
 * @interface CreateRoom200Response
 */
export interface CreateRoom200Response {
    /**
     * 
     * @type {Room}
     * @memberof CreateRoom200Response
     */
    'room': Room;
}
/**
 * 
 * @export
 * @interface CreateRoomRequest
 */
export interface CreateRoomRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateRoomRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateScene200Response
 */
export interface CreateScene200Response {
    /**
     * 
     * @type {Scene}
     * @memberof CreateScene200Response
     */
    'scene': Scene;
}
/**
 * 
 * @export
 * @interface CreateSession200Response
 */
export interface CreateSession200Response {
    /**
     * Session id
     * @type {string}
     * @memberof CreateSession200Response
     */
    'sessionId': string;
}
/**
 * XeoSmartHome device
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'id': string;
    /**
     * Unique serial key of the device, set by the manufacturer
     * @type {string}
     * @memberof Device
     */
    'serialKey': string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'image': string;
    /**
     * 
     * @type {Array<DeviceTask>}
     * @memberof Device
     */
    'tasks': Array<DeviceTask>;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'updatedAt': string;
    /**
     * 
     * @type {DeviceType}
     * @memberof Device
     */
    'type': DeviceType;
}
/**
 * @type DeviceAction
 * @export
 */
export type DeviceAction = ButtonAction | ColorPickerAction | SwitchAction;

/**
 * Log of a device
 * @export
 * @interface DeviceActionLog
 */
export interface DeviceActionLog {
    /**
     * Id of the log
     * @type {string}
     * @memberof DeviceActionLog
     */
    'id': string;
    /**
     * Id of the device
     * @type {string}
     * @memberof DeviceActionLog
     */
    'deviceId': string;
    /**
     * Id of the action
     * @type {string}
     * @memberof DeviceActionLog
     */
    'actionId': string;
    /**
     * Parameters of the action
     * @type {object}
     * @memberof DeviceActionLog
     */
    'parameters': object;
    /**
     * Date of the log
     * @type {string}
     * @memberof DeviceActionLog
     */
    'createdAt': string;
    /**
     * 
     * @type {DeviceActionLogStatus}
     * @memberof DeviceActionLog
     */
    'status': DeviceActionLogStatus;
}
/**
 * @type DeviceActionLogStatus
 * @export
 */
export type DeviceActionLogStatus = string;

/**
 * Sensor of a device
 * @export
 * @interface DeviceSensor
 */
export interface DeviceSensor {
    /**
     * Id of the sensor
     * @type {string}
     * @memberof DeviceSensor
     */
    'id': string;
    /**
     * Name of the sensor
     * @type {string}
     * @memberof DeviceSensor
     */
    'name': string;
    /**
     * Uri of the sensor
     * @type {string}
     * @memberof DeviceSensor
     */
    'uri': string;
    /**
     * Unit of the sensor\'s value
     * @type {string}
     * @memberof DeviceSensor
     */
    'unit': string;
    /**
     * Minimum value of the sensor
     * @type {number}
     * @memberof DeviceSensor
     */
    'minValue': number;
    /**
     * Maximum value of the sensor
     * @type {number}
     * @memberof DeviceSensor
     */
    'maxValue': number;
    /**
     * Number of decimal places of the sensor\'s value
     * @type {number}
     * @memberof DeviceSensor
     */
    'decimalPlaces': number;
    /**
     * Color of the sensor
     * @type {string}
     * @memberof DeviceSensor
     */
    'color': string;
}
/**
 * 
 * @export
 * @interface DeviceSensorData
 */
export interface DeviceSensorData {
    /**
     * Id of the sensor
     * @type {string}
     * @memberof DeviceSensorData
     */
    'id': string;
    /**
     * Uri of the sensor
     * @type {string}
     * @memberof DeviceSensorData
     */
    'uri': string;
    /**
     * 
     * @type {Array<DeviceSensorDataDataInner>}
     * @memberof DeviceSensorData
     */
    'data': Array<DeviceSensorDataDataInner>;
}
/**
 * 
 * @export
 * @interface DeviceSensorDataDataInner
 */
export interface DeviceSensorDataDataInner {
    /**
     * 
     * @type {number}
     * @memberof DeviceSensorDataDataInner
     */
    'timestamp': number;
    /**
     * 
     * @type {number}
     * @memberof DeviceSensorDataDataInner
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface DeviceSession
 */
export interface DeviceSession {
    /**
     * Id of the session
     * @type {string}
     * @memberof DeviceSession
     */
    'id': string;
    /**
     * Id of the device
     * @type {string}
     * @memberof DeviceSession
     */
    'deviceId': string;
    /**
     * Id of the session on the device
     * @type {string}
     * @memberof DeviceSession
     */
    'deviceSessionId': string;
    /**
     * Id of the user
     * @type {string}
     * @memberof DeviceSession
     */
    'userId': string;
    /**
     * Last connection of the device
     * @type {string}
     * @memberof DeviceSession
     */
    'lastConnection': string;
}
/**
 * Task to be executed by a device
 * @export
 * @interface DeviceTask
 */
export interface DeviceTask {
    /**
     * Id of the task
     * @type {string}
     * @memberof DeviceTask
     */
    'id': string;
    /**
     * Name of the task
     * @type {string}
     * @memberof DeviceTask
     */
    'name': string;
    /**
     * Id of the action to be executed
     * @type {string}
     * @memberof DeviceTask
     */
    'actionId': string;
    /**
     * Parameters of the action
     * @type {object}
     * @memberof DeviceTask
     */
    'parameters': object;
    /**
     * Cron expression to schedule the task
     * @type {string}
     * @memberof DeviceTask
     */
    'cron': string;
    /**
     * If the task is enabled
     * @type {boolean}
     * @memberof DeviceTask
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface DeviceType
 */
export interface DeviceType {
    /**
     * 
     * @type {string}
     * @memberof DeviceType
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceType
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceType
     */
    'image': string;
    /**
     * 
     * @type {Array<DeviceAction>}
     * @memberof DeviceType
     */
    'actions': Array<DeviceAction>;
    /**
     * 
     * @type {Array<DeviceSensor>}
     * @memberof DeviceType
     */
    'sensors': Array<DeviceSensor>;
}
/**
 * Task to be executed by a device
 * @export
 * @interface EnhancedDeviceTask
 */
export interface EnhancedDeviceTask {
    /**
     * Id of the task
     * @type {string}
     * @memberof EnhancedDeviceTask
     */
    'id': string;
    /**
     * Name of the task
     * @type {string}
     * @memberof EnhancedDeviceTask
     */
    'name': string;
    /**
     * 
     * @type {DeviceAction}
     * @memberof EnhancedDeviceTask
     */
    'action': DeviceAction;
    /**
     * Parameters of the action
     * @type {object}
     * @memberof EnhancedDeviceTask
     */
    'parameters': object;
    /**
     * If the task is enabled
     * @type {boolean}
     * @memberof EnhancedDeviceTask
     */
    'enabled': boolean;
    /**
     * Cron expression to schedule the task
     * @type {string}
     * @memberof EnhancedDeviceTask
     */
    'cron': string;
    /**
     * 
     * @type {EnhancedDeviceTaskDevice}
     * @memberof EnhancedDeviceTask
     */
    'device': EnhancedDeviceTaskDevice;
}
/**
 * 
 * @export
 * @interface EnhancedDeviceTaskDevice
 */
export interface EnhancedDeviceTaskDevice {
    /**
     * 
     * @type {string}
     * @memberof EnhancedDeviceTaskDevice
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EnhancedDeviceTaskDevice
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ExecuteActionRequest
 */
export interface ExecuteActionRequest {
    /**
     * 
     * @type {string}
     * @memberof ExecuteActionRequest
     */
    'deviceId': string;
    /**
     * 
     * @type {string}
     * @memberof ExecuteActionRequest
     */
    'actionUri': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ExecuteActionRequest
     */
    'parameters': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface ExecuteDeviceActionRequest
 */
export interface ExecuteDeviceActionRequest {
    /**
     * Action uri
     * @type {string}
     * @memberof ExecuteDeviceActionRequest
     */
    'action'?: string;
}
/**
 * Defines what can trigger the execution of the task
 * @export
 * @interface ExecutionTriggers
 */
export interface ExecutionTriggers {
    /**
     * If true, the task can be executed live
     * @type {boolean}
     * @memberof ExecutionTriggers
     */
    'live'?: boolean;
    /**
     * If true, the task can be executed on a schedule
     * @type {boolean}
     * @memberof ExecutionTriggers
     */
    'schedule'?: boolean;
    /**
     * If true, the task can be executed from a widget
     * @type {boolean}
     * @memberof ExecutionTriggers
     */
    'widget'?: boolean;
}
/**
 * Response of the get device sensors data endpoint
 * @export
 * @interface GetDeviceSensorsDataResponse
 */
export interface GetDeviceSensorsDataResponse {
    /**
     * 
     * @type {Array<DeviceSensorData>}
     * @memberof GetDeviceSensorsDataResponse
     */
    'sensors'?: Array<DeviceSensorData>;
}
/**
 * 
 * @export
 * @interface GetDevices200Response
 */
export interface GetDevices200Response {
    /**
     * 
     * @type {Array<Device>}
     * @memberof GetDevices200Response
     */
    'devices': Array<Device> | null;
}
/**
 * 
 * @export
 * @interface GetDevicesAccessToken200Response
 */
export interface GetDevicesAccessToken200Response {
    /**
     * Access token
     * @type {string}
     * @memberof GetDevicesAccessToken200Response
     */
    'accessToken': string;
    /**
     * User id
     * @type {string}
     * @memberof GetDevicesAccessToken200Response
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface GetDevicesSessions200Response
 */
export interface GetDevicesSessions200Response {
    /**
     * 
     * @type {Array<DeviceSession>}
     * @memberof GetDevicesSessions200Response
     */
    'sessions'?: Array<DeviceSession>;
}
/**
 * 
 * @export
 * @interface GetRooms200Response
 */
export interface GetRooms200Response {
    /**
     * 
     * @type {Array<Room>}
     * @memberof GetRooms200Response
     */
    'rooms': Array<Room> | null;
}
/**
 * 
 * @export
 * @interface GetScenes200Response
 */
export interface GetScenes200Response {
    /**
     * 
     * @type {Array<Scene>}
     * @memberof GetScenes200Response
     */
    'scenes': Array<Scene> | null;
}
/**
 * 
 * @export
 * @interface GetUserProfile200Response
 */
export interface GetUserProfile200Response {
    /**
     * 
     * @type {UserProfile}
     * @memberof GetUserProfile200Response
     */
    'user': UserProfile;
}
/**
 * 
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
    /**
     * Access token
     * @type {string}
     * @memberof Login200Response
     */
    'accessToken': string;
    /**
     * Refresh token
     * @type {string}
     * @memberof Login200Response
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Module
 */
export interface Module {
    /**
     * Id of the module
     * @type {string}
     * @memberof Module
     */
    'id': string;
    /**
     * Name of the module
     * @type {string}
     * @memberof Module
     */
    'name': string;
    /**
     * 
     * @type {ModuleLayout}
     * @memberof Module
     */
    'layout': ModuleLayout;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    'contentType': ModuleContentTypeEnum;
}

export const ModuleContentTypeEnum = {
    Devices: 'DEVICES',
    Scenes: 'SCENES',
    Rooms: 'ROOMS',
    Mixed: 'MIXED'
} as const;

export type ModuleContentTypeEnum = typeof ModuleContentTypeEnum[keyof typeof ModuleContentTypeEnum];

/**
 * Type of a module
 * @export
 * @enum {string}
 */

export const ModuleLayout = {
    Stripe: 'STRIPE',
    Grid: 'GRID'
} as const;

export type ModuleLayout = typeof ModuleLayout[keyof typeof ModuleLayout];


/**
 * 
 * @export
 * @interface RegisterDevice200Response
 */
export interface RegisterDevice200Response {
    /**
     * 
     * @type {Device}
     * @memberof RegisterDevice200Response
     */
    'device': Device;
}
/**
 * 
 * @export
 * @interface RegisterDeviceRequest
 */
export interface RegisterDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterDeviceRequest
     */
    'serialKey': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDeviceRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ResetPassword200Response
 */
export interface ResetPassword200Response {
    /**
     * Token to keep track of the reset password process
     * @type {string}
     * @memberof ResetPassword200Response
     */
    'token': string;
    /**
     * Expiration date of the token
     * @type {string}
     * @memberof ResetPassword200Response
     */
    'expiresAt': string;
}
/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'name': string;
    /**
     * Array of object id in the room.
     * @type {Array<string>}
     * @memberof Room
     */
    'devices': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface RoomWithDevices
 */
export interface RoomWithDevices {
    /**
     * 
     * @type {Array<Device>}
     * @memberof RoomWithDevices
     */
    'devices'?: Array<Device>;
    /**
     * 
     * @type {string}
     * @memberof RoomWithDevices
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RoomWithDevices
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RoomWithDevices
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof RoomWithDevices
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface Scene
 */
export interface Scene {
    /**
     * Id of the scene
     * @type {string}
     * @memberof Scene
     */
    'id': string;
    /**
     * Name of the scene
     * @type {string}
     * @memberof Scene
     */
    'name': string;
    /**
     * Array of actions to be executed in the scene
     * @type {Array<SceneAction>}
     * @memberof Scene
     */
    'actions': Array<SceneAction>;
}
/**
 * Action to be executed in a scene
 * @export
 * @interface SceneAction
 */
export interface SceneAction {
    /**
     * Id of the action
     * @type {string}
     * @memberof SceneAction
     */
    'id': string;
    /**
     * Id of the device that will execute the action
     * @type {string}
     * @memberof SceneAction
     */
    'deviceId': string;
    /**
     * Id of the action type
     * @type {string}
     * @memberof SceneAction
     */
    'actionTypeId': string;
    /**
     * Uri of the action
     * @type {string}
     * @memberof SceneAction
     */
    'uri': string;
    /**
     * 
     * @type {{ [key: string]: ActionParameterDefaultValue; }}
     * @memberof SceneAction
     */
    'parameters': { [key: string]: ActionParameterDefaultValue; };
}
/**
 * This is a 2 or more state action, it can be used for on & off action
 * @export
 * @interface SwitchAction
 */
export interface SwitchAction {
    /**
     * 
     * @type {string}
     * @memberof SwitchAction
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SwitchAction
     */
    'type': SwitchActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SwitchAction
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SwitchAction
     */
    'description': string;
    /**
     * 
     * @type {ExecutionTriggers}
     * @memberof SwitchAction
     */
    'executionTriggers': ExecutionTriggers;
    /**
     * 
     * @type {Array<BaseAction>}
     * @memberof SwitchAction
     */
    'options': Array<BaseAction>;
}

export const SwitchActionTypeEnum = {
    Switch: 'SWITCH'
} as const;

export type SwitchActionTypeEnum = typeof SwitchActionTypeEnum[keyof typeof SwitchActionTypeEnum];

/**
 * 
 * @export
 * @interface UpdateDeviceNameRequest
 */
export interface UpdateDeviceNameRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateDeviceNameRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateDevicePhotoRequest
 */
export interface UpdateDevicePhotoRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateDevicePhotoRequest
     */
    'photoUri': string;
}
/**
 * 
 * @export
 * @interface UpdateDeviceTaskRequest
 */
export interface UpdateDeviceTaskRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateDeviceTaskRequest
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof UpdateDeviceTaskRequest
     */
    'parameters': object;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeviceTaskRequest
     */
    'cron': string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDeviceTaskRequest
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface UpdateRoomRequest
 */
export interface UpdateRoomRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoomRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateSceneRequest
 */
export interface UpdateSceneRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateSceneRequest
     */
    'name': string;
    /**
     * 
     * @type {Array<SceneAction>}
     * @memberof UpdateSceneRequest
     */
    'actions': Array<SceneAction>;
}
/**
 * 
 * @export
 * @interface UpdateUserEmail200Response
 */
export interface UpdateUserEmail200Response {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserEmail200Response
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateUserEmail400Response
 */
export interface UpdateUserEmail400Response {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserEmail400Response
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface UpdateUserEmailRequest
 */
export interface UpdateUserEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserEmailRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserEmailRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UpdateUserName200Response
 */
export interface UpdateUserName200Response {
    /**
     * 
     * @type {UpdateUserNameRequest}
     * @memberof UpdateUserName200Response
     */
    'user': UpdateUserNameRequest;
}
/**
 * 
 * @export
 * @interface UpdateUserNameRequest
 */
export interface UpdateUserNameRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserNameRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserNameRequest
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface UpdateUserPasswordRequest
 */
export interface UpdateUserPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPasswordRequest
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPasswordRequest
     */
    'oldPassword': string;
}
/**
 * 
 * @export
 * @interface UpdateUserPhoneNumber200Response
 */
export interface UpdateUserPhoneNumber200Response {
    /**
     * 
     * @type {UpdateUserPhoneNumberRequest}
     * @memberof UpdateUserPhoneNumber200Response
     */
    'user': UpdateUserPhoneNumberRequest;
}
/**
 * 
 * @export
 * @interface UpdateUserPhoneNumberRequest
 */
export interface UpdateUserPhoneNumberRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPhoneNumberRequest
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * Id of the user
     * @type {string}
     * @memberof UserProfile
     */
    'id': string;
    /**
     * First name of the user
     * @type {string}
     * @memberof UserProfile
     */
    'firstName': string;
    /**
     * Last name of the user
     * @type {string}
     * @memberof UserProfile
     */
    'lastName': string;
    /**
     * Email address of the user
     * @type {string}
     * @memberof UserProfile
     */
    'email': string;
    /**
     * Photo of the user
     * @type {string}
     * @memberof UserProfile
     */
    'photo'?: string;
    /**
     * Phone number of the user
     * @type {string}
     * @memberof UserProfile
     */
    'phoneNumber'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add device to room
         * @param {string} roomId 
         * @param {AddDeviceToRoomRequest} [addDeviceToRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDeviceToRoom: async (roomId: string, addDeviceToRoomRequest?: AddDeviceToRoomRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('addDeviceToRoom', 'roomId', roomId)
            const localVarPath = `/rooms-service/rooms/{roomId}/devices`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDeviceToRoomRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Apply scene by id
         * @param {string} sceneId If of the scene to be applied
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyScene: async (sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('applyScene', 'sceneId', sceneId)
            const localVarPath = `/scenes-service/scenes/{sceneId}/apply`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check reset password verification code
         * @param {CheckResetPasswordVerificationCodeRequest} [checkResetPasswordVerificationCodeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkResetPasswordVerificationCode: async (checkResetPasswordVerificationCodeRequest?: CheckResetPasswordVerificationCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts/reset-password/check-verification-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkResetPasswordVerificationCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm reset password
         * @param {ConfirmResetPasswordRequest} [confirmResetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmResetPassword: async (confirmResetPasswordRequest?: ConfirmResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts/reset-password/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmResetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect with google
         * @param {ConnectWithGoogleRequest} [connectWithGoogleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectWithGoogle: async (connectWithGoogleRequest?: ConnectWithGoogleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth-service/login/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectWithGoogleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new account
         * @param {CreateAccountRequest} [createAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (createAccountRequest?: CreateAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {CreateDeviceTaskRequest} [createDeviceTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceTask: async (deviceId: string, createDeviceTaskRequest?: CreateDeviceTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('createDeviceTask', 'deviceId', deviceId)
            const localVarPath = `/devices-service/devices/{deviceId}/tasks`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDeviceTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a room
         * @param {CreateRoomRequest} [createRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom: async (createRoomRequest?: CreateRoomRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rooms-service/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a scene
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScene: async (updateDeviceNameRequest?: UpdateDeviceNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scenes-service/scenes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDeviceNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth-service/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('deleteDevice', 'deviceId', deviceId)
            const localVarPath = `/devices-service/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceTask: async (deviceId: string, taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('deleteDeviceTask', 'deviceId', deviceId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteDeviceTask', 'taskId', taskId)
            const localVarPath = `/devices-service/devices/{deviceId}/tasks/{taskId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a room by id
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteRoom', 'roomId', roomId)
            const localVarPath = `/rooms-service/rooms/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete scene by id
         * @param {string} sceneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScene: async (sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('deleteScene', 'sceneId', sceneId)
            const localVarPath = `/scenes-service/scenes/{sceneId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ExecuteActionRequest} [executeActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeAction: async (executeActionRequest?: ExecuteActionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices-service/execute-action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executeActionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {ExecuteDeviceActionRequest} [executeDeviceActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeDeviceAction: async (deviceId: string, executeDeviceActionRequest?: ExecuteDeviceActionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('executeDeviceAction', 'deviceId', deviceId)
            const localVarPath = `/devices-service/devices/{deviceId}/actions`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executeDeviceActionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sensors data from device
         * @param {string} deviceId Id of the device to get sensors from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceSensorsData: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDeviceSensorsData', 'deviceId', deviceId)
            const localVarPath = `/sensors-service/devices/{deviceId}/sensors`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices-service/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get access token for devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesAccessToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices-service/access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get devices sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesSessions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/control-nodes-sessions/users/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rooms-service/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all scenes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScenes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scenes-service/scenes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login a user
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth-service/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDeviceRequest} [registerDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDevice: async (registerDeviceRequest?: RegisterDeviceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices-service/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove device from room
         * @param {string} roomId 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDeviceFromRoom: async (roomId: string, deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('removeDeviceFromRoom', 'roomId', roomId)
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('removeDeviceFromRoom', 'deviceId', deviceId)
            const localVarPath = `/rooms-service/rooms/{roomId}/devices/{deviceId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password
         * @param {UpdateUserEmail200Response} [updateUserEmail200Response] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (updateUserEmail200Response?: UpdateUserEmail200Response, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserEmail200Response, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceName: async (deviceId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateDeviceName', 'deviceId', deviceId)
            const localVarPath = `/devices-service/devices/{deviceId}/name`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDeviceNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {UpdateDevicePhotoRequest} [updateDevicePhotoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevicePhoto: async (deviceId: string, updateDevicePhotoRequest?: UpdateDevicePhotoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateDevicePhoto', 'deviceId', deviceId)
            const localVarPath = `/devices-service/devices/{deviceId}/photo`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDevicePhotoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {string} taskId 
         * @param {UpdateDeviceTaskRequest} [updateDeviceTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceTask: async (deviceId: string, taskId: string, updateDeviceTaskRequest?: UpdateDeviceTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateDeviceTask', 'deviceId', deviceId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateDeviceTask', 'taskId', taskId)
            const localVarPath = `/devices-service/devices/{deviceId}/tasks/{taskId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDeviceTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roomId 
         * @param {UpdateRoomRequest} [updateRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoom: async (roomId: string, updateRoomRequest?: UpdateRoomRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('updateRoom', 'roomId', roomId)
            const localVarPath = `/rooms-service/rooms/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoomRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update room name
         * @param {string} roomId 
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoomName: async (roomId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('updateRoomName', 'roomId', roomId)
            const localVarPath = `/rooms-service/rooms/{roomId}/name`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDeviceNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update scene by id
         * @param {string} sceneId 
         * @param {UpdateSceneRequest} [updateSceneRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScene: async (sceneId: string, updateSceneRequest?: UpdateSceneRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('updateScene', 'sceneId', sceneId)
            const localVarPath = `/scenes-service/scenes/{sceneId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSceneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserEmailRequest} [updateUserEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail: async (updateUserEmailRequest?: UpdateUserEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts/me/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update first name and last name of the user
         * @param {UpdateUserNameRequest} [updateUserNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserName: async (updateUserNameRequest?: UpdateUserNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts/me/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update password of the user
         * @param {UpdateUserPasswordRequest} [updateUserPasswordRequest] Successful operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: async (updateUserPasswordRequest?: UpdateUserPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/update-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserPhoneNumberRequest} [updateUserPhoneNumberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhoneNumber: async (updateUserPhoneNumberRequest?: UpdateUserPhoneNumberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts-service/accounts/me/phone-number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Access-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserPhoneNumberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add device to room
         * @param {string} roomId 
         * @param {AddDeviceToRoomRequest} [addDeviceToRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDeviceToRoom(roomId: string, addDeviceToRoomRequest?: AddDeviceToRoomRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoom200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDeviceToRoom(roomId, addDeviceToRoomRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addDeviceToRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Apply scene by id
         * @param {string} sceneId If of the scene to be applied
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyScene(sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplyScene200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyScene(sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.applyScene']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check reset password verification code
         * @param {CheckResetPasswordVerificationCodeRequest} [checkResetPasswordVerificationCodeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkResetPasswordVerificationCode(checkResetPasswordVerificationCodeRequest?: CheckResetPasswordVerificationCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkResetPasswordVerificationCode(checkResetPasswordVerificationCodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.checkResetPasswordVerificationCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Confirm reset password
         * @param {ConfirmResetPasswordRequest} [confirmResetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmResetPassword(confirmResetPasswordRequest?: ConfirmResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmResetPassword(confirmResetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.confirmResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Connect with google
         * @param {ConnectWithGoogleRequest} [connectWithGoogleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectWithGoogle(connectWithGoogleRequest?: ConnectWithGoogleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectWithGoogle(connectWithGoogleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.connectWithGoogle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new account
         * @param {CreateAccountRequest} [createAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(createAccountRequest?: CreateAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(createAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {CreateDeviceTaskRequest} [createDeviceTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeviceTask(deviceId: string, createDeviceTaskRequest?: CreateDeviceTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDevice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeviceTask(deviceId, createDeviceTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDeviceTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a room
         * @param {CreateRoomRequest} [createRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoom(createRoomRequest?: CreateRoomRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoom200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(createRoomRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a scene
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScene(updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateScene200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScene(updateDeviceNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createScene']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSession200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDevice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDevice(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeviceTask(deviceId: string, taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDevice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeviceTask(deviceId, taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDeviceTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a room by id
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoom(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoom200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete scene by id
         * @param {string} sceneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScene(sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateScene200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScene(sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteScene']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ExecuteActionRequest} [executeActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeAction(executeActionRequest?: ExecuteActionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeAction(executeActionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeAction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {ExecuteDeviceActionRequest} [executeDeviceActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeDeviceAction(deviceId: string, executeDeviceActionRequest?: ExecuteDeviceActionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeDeviceAction(deviceId, executeDeviceActionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeDeviceAction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get sensors data from device
         * @param {string} deviceId Id of the device to get sensors from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceSensorsData(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeviceSensorsDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceSensorsData(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDeviceSensorsData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDevices200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDevices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get access token for devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicesAccessToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDevicesAccessToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevicesAccessToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDevicesAccessToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get devices sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicesSessions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDevicesSessions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevicesSessions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDevicesSessions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRooms(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRooms200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRooms(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRooms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all scenes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScenes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetScenes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScenes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getScenes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login a user
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterDeviceRequest} [registerDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerDevice(registerDeviceRequest?: RegisterDeviceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDevice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerDevice(registerDeviceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove device from room
         * @param {string} roomId 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDeviceFromRoom(roomId: string, deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoom200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDeviceFromRoom(roomId, deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.removeDeviceFromRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reset password
         * @param {UpdateUserEmail200Response} [updateUserEmail200Response] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(updateUserEmail200Response?: UpdateUserEmail200Response, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(updateUserEmail200Response, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeviceName(deviceId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDevice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeviceName(deviceId, updateDeviceNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateDeviceName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {UpdateDevicePhotoRequest} [updateDevicePhotoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevicePhoto(deviceId: string, updateDevicePhotoRequest?: UpdateDevicePhotoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDevice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDevicePhoto(deviceId, updateDevicePhotoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateDevicePhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {string} taskId 
         * @param {UpdateDeviceTaskRequest} [updateDeviceTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeviceTask(deviceId: string, taskId: string, updateDeviceTaskRequest?: UpdateDeviceTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDevice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeviceTask(deviceId, taskId, updateDeviceTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateDeviceTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roomId 
         * @param {UpdateRoomRequest} [updateRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoom(roomId: string, updateRoomRequest?: UpdateRoomRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoom200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoom(roomId, updateRoomRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update room name
         * @param {string} roomId 
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoomName(roomId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoom200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoomName(roomId, updateDeviceNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateRoomName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update scene by id
         * @param {string} sceneId 
         * @param {UpdateSceneRequest} [updateSceneRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScene(sceneId: string, updateSceneRequest?: UpdateSceneRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateScene200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScene(sceneId, updateSceneRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateScene']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateUserEmailRequest} [updateUserEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserEmail(updateUserEmailRequest?: UpdateUserEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserEmail200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserEmail(updateUserEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUserEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update first name and last name of the user
         * @param {UpdateUserNameRequest} [updateUserNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserName(updateUserNameRequest?: UpdateUserNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserName200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserName(updateUserNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUserName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * update password of the user
         * @param {UpdateUserPasswordRequest} [updateUserPasswordRequest] Successful operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPassword(updateUserPasswordRequest?: UpdateUserPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPassword(updateUserPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUserPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateUserPhoneNumberRequest} [updateUserPhoneNumberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPhoneNumber(updateUserPhoneNumberRequest?: UpdateUserPhoneNumberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserPhoneNumber200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPhoneNumber(updateUserPhoneNumberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUserPhoneNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add device to room
         * @param {string} roomId 
         * @param {AddDeviceToRoomRequest} [addDeviceToRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDeviceToRoom(roomId: string, addDeviceToRoomRequest?: AddDeviceToRoomRequest, options?: any): AxiosPromise<CreateRoom200Response> {
            return localVarFp.addDeviceToRoom(roomId, addDeviceToRoomRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Apply scene by id
         * @param {string} sceneId If of the scene to be applied
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyScene(sceneId: string, options?: any): AxiosPromise<ApplyScene200Response> {
            return localVarFp.applyScene(sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check reset password verification code
         * @param {CheckResetPasswordVerificationCodeRequest} [checkResetPasswordVerificationCodeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkResetPasswordVerificationCode(checkResetPasswordVerificationCodeRequest?: CheckResetPasswordVerificationCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.checkResetPasswordVerificationCode(checkResetPasswordVerificationCodeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm reset password
         * @param {ConfirmResetPasswordRequest} [confirmResetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmResetPassword(confirmResetPasswordRequest?: ConfirmResetPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.confirmResetPassword(confirmResetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect with google
         * @param {ConnectWithGoogleRequest} [connectWithGoogleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectWithGoogle(connectWithGoogleRequest?: ConnectWithGoogleRequest, options?: any): AxiosPromise<Login200Response> {
            return localVarFp.connectWithGoogle(connectWithGoogleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new account
         * @param {CreateAccountRequest} [createAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(createAccountRequest?: CreateAccountRequest, options?: any): AxiosPromise<Login200Response> {
            return localVarFp.createAccount(createAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {CreateDeviceTaskRequest} [createDeviceTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceTask(deviceId: string, createDeviceTaskRequest?: CreateDeviceTaskRequest, options?: any): AxiosPromise<RegisterDevice200Response> {
            return localVarFp.createDeviceTask(deviceId, createDeviceTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a room
         * @param {CreateRoomRequest} [createRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom(createRoomRequest?: CreateRoomRequest, options?: any): AxiosPromise<CreateRoom200Response> {
            return localVarFp.createRoom(createRoomRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a scene
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScene(updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: any): AxiosPromise<CreateScene200Response> {
            return localVarFp.createScene(updateDeviceNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(options?: any): AxiosPromise<CreateSession200Response> {
            return localVarFp.createSession(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(deviceId: string, options?: any): AxiosPromise<RegisterDevice200Response> {
            return localVarFp.deleteDevice(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceTask(deviceId: string, taskId: string, options?: any): AxiosPromise<RegisterDevice200Response> {
            return localVarFp.deleteDeviceTask(deviceId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a room by id
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom(roomId: string, options?: any): AxiosPromise<CreateRoom200Response> {
            return localVarFp.deleteRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete scene by id
         * @param {string} sceneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScene(sceneId: string, options?: any): AxiosPromise<CreateScene200Response> {
            return localVarFp.deleteScene(sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExecuteActionRequest} [executeActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeAction(executeActionRequest?: ExecuteActionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.executeAction(executeActionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {ExecuteDeviceActionRequest} [executeDeviceActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeDeviceAction(deviceId: string, executeDeviceActionRequest?: ExecuteDeviceActionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.executeDeviceAction(deviceId, executeDeviceActionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sensors data from device
         * @param {string} deviceId Id of the device to get sensors from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceSensorsData(deviceId: string, options?: any): AxiosPromise<GetDeviceSensorsDataResponse> {
            return localVarFp.getDeviceSensorsData(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevices(options?: any): AxiosPromise<GetDevices200Response> {
            return localVarFp.getDevices(options).then((request) => request(axios, basePath));
        },
        /**
         * Get access token for devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesAccessToken(options?: any): AxiosPromise<GetDevicesAccessToken200Response> {
            return localVarFp.getDevicesAccessToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get devices sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesSessions(options?: any): AxiosPromise<GetDevicesSessions200Response> {
            return localVarFp.getDevicesSessions(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms(options?: any): AxiosPromise<GetRooms200Response> {
            return localVarFp.getRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all scenes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScenes(options?: any): AxiosPromise<GetScenes200Response> {
            return localVarFp.getScenes(options).then((request) => request(axios, basePath));
        },
        /**
         * Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options?: any): AxiosPromise<GetUserProfile200Response> {
            return localVarFp.getUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Login a user
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<Login200Response> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDeviceRequest} [registerDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDevice(registerDeviceRequest?: RegisterDeviceRequest, options?: any): AxiosPromise<RegisterDevice200Response> {
            return localVarFp.registerDevice(registerDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove device from room
         * @param {string} roomId 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDeviceFromRoom(roomId: string, deviceId: string, options?: any): AxiosPromise<CreateRoom200Response> {
            return localVarFp.removeDeviceFromRoom(roomId, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset password
         * @param {UpdateUserEmail200Response} [updateUserEmail200Response] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(updateUserEmail200Response?: UpdateUserEmail200Response, options?: any): AxiosPromise<ResetPassword200Response> {
            return localVarFp.resetPassword(updateUserEmail200Response, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceName(deviceId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: any): AxiosPromise<RegisterDevice200Response> {
            return localVarFp.updateDeviceName(deviceId, updateDeviceNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {UpdateDevicePhotoRequest} [updateDevicePhotoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevicePhoto(deviceId: string, updateDevicePhotoRequest?: UpdateDevicePhotoRequest, options?: any): AxiosPromise<RegisterDevice200Response> {
            return localVarFp.updateDevicePhoto(deviceId, updateDevicePhotoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {string} taskId 
         * @param {UpdateDeviceTaskRequest} [updateDeviceTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceTask(deviceId: string, taskId: string, updateDeviceTaskRequest?: UpdateDeviceTaskRequest, options?: any): AxiosPromise<RegisterDevice200Response> {
            return localVarFp.updateDeviceTask(deviceId, taskId, updateDeviceTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roomId 
         * @param {UpdateRoomRequest} [updateRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoom(roomId: string, updateRoomRequest?: UpdateRoomRequest, options?: any): AxiosPromise<CreateRoom200Response> {
            return localVarFp.updateRoom(roomId, updateRoomRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update room name
         * @param {string} roomId 
         * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoomName(roomId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: any): AxiosPromise<CreateRoom200Response> {
            return localVarFp.updateRoomName(roomId, updateDeviceNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update scene by id
         * @param {string} sceneId 
         * @param {UpdateSceneRequest} [updateSceneRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScene(sceneId: string, updateSceneRequest?: UpdateSceneRequest, options?: any): AxiosPromise<CreateScene200Response> {
            return localVarFp.updateScene(sceneId, updateSceneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserEmailRequest} [updateUserEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail(updateUserEmailRequest?: UpdateUserEmailRequest, options?: any): AxiosPromise<UpdateUserEmail200Response> {
            return localVarFp.updateUserEmail(updateUserEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update first name and last name of the user
         * @param {UpdateUserNameRequest} [updateUserNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserName(updateUserNameRequest?: UpdateUserNameRequest, options?: any): AxiosPromise<UpdateUserName200Response> {
            return localVarFp.updateUserName(updateUserNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * update password of the user
         * @param {UpdateUserPasswordRequest} [updateUserPasswordRequest] Successful operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword(updateUserPasswordRequest?: UpdateUserPasswordRequest, options?: any): AxiosPromise<string> {
            return localVarFp.updateUserPassword(updateUserPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserPhoneNumberRequest} [updateUserPhoneNumberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhoneNumber(updateUserPhoneNumberRequest?: UpdateUserPhoneNumberRequest, options?: any): AxiosPromise<UpdateUserPhoneNumber200Response> {
            return localVarFp.updateUserPhoneNumber(updateUserPhoneNumberRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add device to room
     * @param {string} roomId 
     * @param {AddDeviceToRoomRequest} [addDeviceToRoomRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addDeviceToRoom(roomId: string, addDeviceToRoomRequest?: AddDeviceToRoomRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addDeviceToRoom(roomId, addDeviceToRoomRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Apply scene by id
     * @param {string} sceneId If of the scene to be applied
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public applyScene(sceneId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).applyScene(sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check reset password verification code
     * @param {CheckResetPasswordVerificationCodeRequest} [checkResetPasswordVerificationCodeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkResetPasswordVerificationCode(checkResetPasswordVerificationCodeRequest?: CheckResetPasswordVerificationCodeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).checkResetPasswordVerificationCode(checkResetPasswordVerificationCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm reset password
     * @param {ConfirmResetPasswordRequest} [confirmResetPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public confirmResetPassword(confirmResetPasswordRequest?: ConfirmResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).confirmResetPassword(confirmResetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect with google
     * @param {ConnectWithGoogleRequest} [connectWithGoogleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public connectWithGoogle(connectWithGoogleRequest?: ConnectWithGoogleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).connectWithGoogle(connectWithGoogleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new account
     * @param {CreateAccountRequest} [createAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAccount(createAccountRequest?: CreateAccountRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAccount(createAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {CreateDeviceTaskRequest} [createDeviceTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDeviceTask(deviceId: string, createDeviceTaskRequest?: CreateDeviceTaskRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDeviceTask(deviceId, createDeviceTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a room
     * @param {CreateRoomRequest} [createRoomRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRoom(createRoomRequest?: CreateRoomRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRoom(createRoomRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a scene
     * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createScene(updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createScene(updateDeviceNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSession(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete device
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDevice(deviceId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDevice(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDeviceTask(deviceId: string, taskId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDeviceTask(deviceId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a room by id
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRoom(roomId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete scene by id
     * @param {string} sceneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteScene(sceneId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteScene(sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExecuteActionRequest} [executeActionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public executeAction(executeActionRequest?: ExecuteActionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).executeAction(executeActionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {ExecuteDeviceActionRequest} [executeDeviceActionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public executeDeviceAction(deviceId: string, executeDeviceActionRequest?: ExecuteDeviceActionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).executeDeviceAction(deviceId, executeDeviceActionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get sensors data from device
     * @param {string} deviceId Id of the device to get sensors from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDeviceSensorsData(deviceId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDeviceSensorsData(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDevices(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDevices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get access token for devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDevicesAccessToken(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDevicesAccessToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get devices sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDevicesSessions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDevicesSessions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRooms(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all scenes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScenes(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScenes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserProfile(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login a user
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDeviceRequest} [registerDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerDevice(registerDeviceRequest?: RegisterDeviceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerDevice(registerDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove device from room
     * @param {string} roomId 
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeDeviceFromRoom(roomId: string, deviceId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).removeDeviceFromRoom(roomId, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset password
     * @param {UpdateUserEmail200Response} [updateUserEmail200Response] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetPassword(updateUserEmail200Response?: UpdateUserEmail200Response, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resetPassword(updateUserEmail200Response, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDeviceName(deviceId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDeviceName(deviceId, updateDeviceNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {UpdateDevicePhotoRequest} [updateDevicePhotoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDevicePhoto(deviceId: string, updateDevicePhotoRequest?: UpdateDevicePhotoRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDevicePhoto(deviceId, updateDevicePhotoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {string} taskId 
     * @param {UpdateDeviceTaskRequest} [updateDeviceTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDeviceTask(deviceId: string, taskId: string, updateDeviceTaskRequest?: UpdateDeviceTaskRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDeviceTask(deviceId, taskId, updateDeviceTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roomId 
     * @param {UpdateRoomRequest} [updateRoomRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRoom(roomId: string, updateRoomRequest?: UpdateRoomRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRoom(roomId, updateRoomRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update room name
     * @param {string} roomId 
     * @param {UpdateDeviceNameRequest} [updateDeviceNameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRoomName(roomId: string, updateDeviceNameRequest?: UpdateDeviceNameRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRoomName(roomId, updateDeviceNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update scene by id
     * @param {string} sceneId 
     * @param {UpdateSceneRequest} [updateSceneRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateScene(sceneId: string, updateSceneRequest?: UpdateSceneRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateScene(sceneId, updateSceneRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserEmailRequest} [updateUserEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserEmail(updateUserEmailRequest?: UpdateUserEmailRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUserEmail(updateUserEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update first name and last name of the user
     * @param {UpdateUserNameRequest} [updateUserNameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserName(updateUserNameRequest?: UpdateUserNameRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUserName(updateUserNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update password of the user
     * @param {UpdateUserPasswordRequest} [updateUserPasswordRequest] Successful operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserPassword(updateUserPasswordRequest?: UpdateUserPasswordRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUserPassword(updateUserPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserPhoneNumberRequest} [updateUserPhoneNumberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserPhoneNumber(updateUserPhoneNumberRequest?: UpdateUserPhoneNumberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUserPhoneNumber(updateUserPhoneNumberRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



